.. index:: Resource Representation

.. _resource-representation-format:

Resource representation format
==============================

Resources
---------

Serialization format: HAL in UTF-8 encoding
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*HAL* MUST be used as representation format for all non-binary resources. See :ref:`hal-and-our-deviations` for more information.

Example response:

.. code-block:: javascript

    HTTP/1.1 200 OK
    Content-Type: application/json
    ETag: "677d1d9085dah"

    {
     "_links": {
        "self": { "href": "/v1/categories/92" },
        "describedby": "http://api.marktplaats.nl/v1/docs/resources/category",
        "http://api.marktplaats.nl/v1/docs/rels/parent-category": { "href": "/v1/categories/91" }
     },
     "_embedded": {
        "http://api.marktplaats.nl/v1/docs/rels/parent-category": {
             "_links": {
                "self": { "href": "/v1/categories/91" }
             },
             "name": "Auto's",
             "shortName": "Auto's"
        }
     },
     "name": "Alpha romeo",
     "shortName": "Alpha romeo"
    }

Also see these articles:

* `HAL introduction <http://www.mwop.net/blog/2013-02-11-restful-apis-with-zf2-part-1.html>`_
* `JSON linking with HAL <http://blog.stateless.co/post/13296666138/json-linking-with-hal>`_

The base URL is a HAL resource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The base URL is a HAL resource with appropriate documentation links.

For example:

.. code-block:: javascript

    GET /v1 HTTP/1.1
    Host: api.marktplaats.nl

    HTTP/1.1 200 OK
    Content-Type: application/json
    ETag: "d9087df677dgh"

    {
        "_links": {
            "self": { "href": "/" },
            "describedby": { "href": "http://api.marktplaats.nl/v1/docs" },
            "http://api.marktplaats.nl/v1/docs/resources/categories": { "href": "/v1/categories" },
            "http://api.marktplaats.nl/v1/docs/resources/advertisements": { "href": "/v1/advertisements" },
            "http://api.marktplaats.nl/v1/docs/resources/users": { "href": "/v1/users" }
        }
    }


Each resource SHOULD contain ``self`` and ``describedby`` links
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Each resource SHOULD have ``self`` and ``describedby`` link as described by HAL.

Example:

.. code-block:: json

    {
        "_links": {
            "self": { "href": "/v1/categories/1" }
            "describedby": "http://api.marktplaats.nl/v1/docs/resources/category"
        }
    }

When available IANA registered relation types SHOULD be used as link relations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A link relation is a descriptive attribute attached to a hyperlink in order to define the type of the link, or the
relationship between the source and destination resources.

A `standardized link relation <http://www.iana.org/assignments/link-relations/link-relations.xhtml>`_ SHOULD be used when
such a relation is available.

Examples of commonly used IANA relation types are : ``self``, ``first``, ``prev``, ``next``, and ``last``.


Custom link relation types SHOULD be uri's that when dereferenced in a web browser provide relevant documentation, in the form of an HTML page
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If no suitable IANA relation type is available, you can use a custom relation type. In accordance with the
`web linking RFC <http://tools.ietf.org/html/rfc5988>`_ custom link relation types SHOULD be uri's
that when dereferenced in a web browser provide relevant documentation, in the form of an HTML page.

The references page is intended for the developer that is using the API.

This page should contain the following information:

*   A list of request methods (GET, PUT, POST etc) supported for this URI.
*   A description of the responses you can expect from any of the allowed request methods. This description should contain
    the status code and a description of the links and embedded resources included in the response.

See also `documentation requirements <40-documentation-requirements.rst>`_.

Custom link relations URIs MAY be shortened with the CURIE syntax
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

HAL allows `CURIE syntax <http://tools.ietf.org/html/draft-kelly-json-hal-06#ref-W3C.NOTE-curie-20101216>`_ to shorten
the URIs, we allow it as well. See the HAL specification for an example.

Binary resources
----------------

Binary resources MAY use any format. Binary resources MUST be linked to from another HAL resource. The link
is RECOMMENDED to be in the ``_links`` section but MAY be in any other field.

Resource collections
--------------------

Collections MUST be homogeneous
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Depending on use cases, you can group resources into collections by using similarities (e.g. different types of
listings in a single collection). However, no matter what criteria you choose for any collection, it is important to
keep the representation homogeneous so that it is easy to use by clients.

Design the representation of the collection such that members in a collection are structurally and syntactically
similar.

URL templates are RECOMMENDED in Links
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

HAL allows for URI templates in links (section 5.1 in HAL specification). These are perfect to describe to links to
items in a resource collection.

Relation names
--------------

Relation names MUST be in English unless they represent a product or company name
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The consumers of the API are developers which might come from any country. However, developer will for sure understand
English. Product and company names are excluded from this rule.

Words in relation names MUST be separated by a dash ``-``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Relation names are used in URL and words MUST therefore be separated by dash ``-``.

Field names
-----------

Field names MUST be in English unless they represent a product or company name
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The consumers of the API are developers which might come from any country. However, developer will for sure understand
English. Product and company names are excluded from this rule.

Field names MUST have consistent semantics and representation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When two fields have the same name (even if they are in different entities), they MUST mean the same thing and they MUST
use the same representation.

This rule does not apply to deprecated fields.

Field names MUST use camelCase, contain only latin characters ``a`` - ``z``, ``A`` - ``Z``, ``0`` - ``9``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Fields MUST use only alphanumeric characters and MUST use the camelCase notation.

.. code-block:: javascript

    { "asqEnabled" : true }    // correct
    { "asq_enabled" : true }   // NOT correct
    { "asq_enabled?" : true }  // NOT correct

Field names MUST start with a lowercase letter, ``a`` - ``z``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Fields MUST start with a lower case letter. In particular they MUST NOT start with an underscore ``_``.

Field deprecation
^^^^^^^^^^^^^^^^^

See versioning.

Field values
------------

See the list of supported field types: :ref:`field-types`

Structure field values
^^^^^^^^^^^^^^^^^^^^^^

You are RECOMMENDED to represent complex fields with a JSON object. This allows for better composability, the struct
might later move to a separate entity.

Optional fields SHOULD not be serialized when they have no value
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When an optional field has no value, it SHOULD be left out of the representation.
When returning a resource with optional fields, and there is no value for a given field, then the field should be left
out entirely in case of a String, Numeric or Object value. In the case of an Array, an empty list may be returned.

The rationale for leaving omitting the field when creating or updating a resource (POST, PUT or PATCH), is that it is not allowed to specify a key without a value. Theoretically, the value ``null`` could be used, but this will only lead to confusion and complicate the parsing of the JSON object.

Field values that represent a timestamp are in ISO 8601
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Timestamp values are represented using the `ISO 8601 <http://en.wikipedia.org/wiki/ISO_8601>`_ format full syntax in UTC (``Z``)
with milliseconds (e.g. ``2013-20-02T18:02:24.000Z``).

Some systems will store dates in a lower precision. For consistency even those dates are represented in the full format.
However, clients should be prepared to see timestamps rounded, for example to the second.

Field values that represent a date are in ISO 8601
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Date values are represented using the `ISO 8601 <http://en.wikipedia.org/wiki/ISO_8601>`_ in the format YYYY-MM-DD
(eg. 2013-01-20 to represent january 20th 2013)

Field values that represent countries are in ISO 3166-1 alpha-2 format
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Country codes are defined by the ISO 3166-1-alpha-2 code standard. You can find the complete list
`here <http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements>`_. For example ``NL``.

The codes are case sensitive.

Field values that represent a currency are in ISO 4217
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Currencies are encoded using the `ISO 4217 <http://en.wikipedia.org/wiki/ISO_4217>`_ currency format. For example ``EUR``,
and not ``â‚¬``.

The codes are case sensitive.

All money types are integers and conform to its smallest currency unit
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

All money types are integers and conform to its smallest *commonly used* currency unit. For example, if the currency of
a payment is in euros (EUR), the values of money fields conform to euro cents. So an amount of EUR 9,95 is represented
as ``995``.

See the currency exponent as defined by `ISO 4217 <http://en.wikipedia.org/wiki/ISO_4217>`_ to find the smallest commonly
used currency unit for a given currency.

All numbers are integers unless precision is not important
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Most numbers need to be precise, rounding due to using a floating point (64-bit IEEE754, or 32-bit IEEE754) can lead to
unexpected errors. There are two allowed options:

* represent the number in some exponent (e.g. in cm instead of m), this is required with a monetary amount
  (see previous rule),
* represent the precise number as a string.

The first option is preferred. However, for larger numbers (JSON does not support numbers above 2^52), the second option
MUST be selected.

There are few exceptions to this rule. Here is the list of known and allowed exceptions:

* WGS84 coordinates
* Rates or ratios that have a value between ``0.0`` and ``1.0``.

See also the list of supported field types: :ref:`field-types`

Binary field values
^^^^^^^^^^^^^^^^^^^

See the list of supported field types: :ref:`field-types`


Errors
------

This section was inspired by the article
`Error handling considerations and best practices <http://soabits.blogspot.dk/2013/05/error-handling-considerations-and-best.html>`_
and `vnd.error <https://github.com/blongden/vnd.error>`_ format.

Error messages follow a standard format
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here is an example request that produces an error response:

.. code-block:: javascript

    POST /v1/categories/95 HTTP/1.1
    Host: api.marktplaats.nl
    Accept-Language: nl, en
    If-Match: "qg7968osihugw"

    {
        "id": "abc",
        "parentCategoryId": 91,
        "shortName": "Walnoot"
    }


    HTTP/1.1 400 Bad Request
    Content-Type: application/json
    Content-Language: nl

    {
        "_links": {
            "help": {
              "href": "http://api.marktplaats.nl/v1/docs/errors/validation-failure"
            }
        },
        "logref": "4298asfpohsa98yasohq97q3yff22",
        "statuscode": 400,
        "code" : "validation-failure",
        "message": "Validatie mislukt",
        "details": [
            { "field": "is",        "message": "Is geen geldig getal.",  "code": "not-a-number" },
            { "field": "name",      "message": "Minstens 15 karakters.", "code": "too-short", "value": "15" },
            { "field": "name",      "message": "'%' is niet toegestaan.","code": "pattern-did-not-match", "value": "[a-zA-Z0-9]{15,30}" },
            { "field": "shortName", "message": "Is geen auto-merk.",     "code": "not-a-car-brand" },
            { "fields": ["field1", "field2"], "message": "Some error over multiple fields.", "code": "a-b-c" }
        ]
    }

The error format supports the following features:

* It contains messages that are suitable for display *to a human* (in the correct *language*).
* It contains enough data to allow highlighting fields in a UI with relevant messages (again in the correct language).
* It contains enough information to allow for automated processing.
* It is suitable for JSONP.

Here follows a description of the error format.

Error responses MUST follow the same representation rules as other resources: HAL, JSON in UTF-8 and content-type MUST be ``application/json``.

``_link.help.href`` *(REQUIRED)* : A URL that refers to a help page that can be used by the developer that uses the API. (See `documentation requirements <40-documentation-requirements.rst>`_.)
Note that we're not using ``describedby`` (as in other HAL resource representations).

``logref`` *(REQUIRED)* : A unique identifier that can be used to find the error in the application logs on the server side (for example a request id).

``message`` *(REQUIRED)* : A human readable message related to the current error which may be displayed to the user of the api. The language of the message
SHOULD be selected from the ``Accept-Language`` header in the request (if present). If no language can be selected, there SHOULD be a fixed fall-back language.
The selected language MUST be set in the ``Content-Language`` response header.

``statuscode`` *(REQUIRED)*: MUST be the same as the HTTP Status code which is sent with this error. The reason to
include this in the JSON as well, is because if you are using the API over JSONP for example, there is no easy way
to get the error code. This is to make it more easy to use the API.

``code`` *(REQUIRED)* : An error code. The error code SHOULD be same as the last part of the help url and SHOULD
consist (mostly) out of lower case letters. (Letters allow for easier documentation-lookup then just a numeric code.)

``details`` *(optional)* : Field by field error messages.

``details[*].field`` or ``details[*].fields`` *(at least one is REQUIRED)* : Name of the field(s) that did not pass validation.

``details[*].message`` *(REQUIRED)* : A human readable description of the message for the given field in error. Please
make sure field contains a full sentence. The language SHOULD be the same as the language used in field ``message`` described above.

``details[*].code`` *(REQUIRED)* : A machine readable code for the error. The code SHOULD consist (mostly) out of lower case
letters.  (Letters allow for easier documentation-lookup then just a numeric code.)

``details[*].value`` *(optional)* : An optional value which supports the machine readable code. The actual value and
its format depends on the error code.

All fields MUST be string values.

An appropriate status code MUST be used when serving an error resource
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When serving an error resource an appropriate status code MUST be used. E.g. 4xx for client errors and 5xx for
processing errors.

To determine which error code is appropriate, refer to the status codes section of this `image <20-whhD1.png>`_. (Copied
from http://i.stack.imgur.com/whhD1.png.)

Stack traces MUST NOT be included in the error message
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

It may be tempting to include a stack trace for easier support when something goes wrong. Don't do it! This kind of
information is too valuable for hackers and it is therefore not allowed.
